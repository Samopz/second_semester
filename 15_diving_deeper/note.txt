2024-04-06

## Binary Search
[x,x,x,x,x,x,x,x,x]
[4,5,3,7,9,6,1,0,2]

// 0(n) -> linear time
function linearSearch(needle, array) {
    for (let i of array) {
        if(i == needle) {
            return true;
        }
    }
    return false;
}
n = 7
[1,2,3,4,5, 6,7,8,9,0]

[1,2,3,4, 5, 6,7,8,9,0]

[1,2,3,4, 5, 6,7 ,8,9,0]


CREATE TABLE user {
    id NOT NULL PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    role VARCHAR(30) NOT NULL,
};

ALTER TABLE user ADD INDEX (role); // <= index

//// FOR MONGODB
    db.collection.createIndex( { role : -1 }, function(err, result) {
        console.log(result);
        callback(result);
    })


//// FOR MONGODB USING MONGOOSE
const userSchema = {
    name: {
        type: String,
        trim: true,
        unique: true,
    };
    email: {
        type: String,
        trim: true,
        unique: true,
    };
    role: {
        type: String,
        trim: true,
        index: true
    },
}

Index =>
Index types => PRIMARY, UNIQUE, COMPOSITE INDEX, ...

# Migration and Seed.
## MIGRATIONS
Migration helps keep our database in sync with our app.
They are manual or automated

## Seed
Is data planted into the DB at least once in the life time of the application

## ACID

What are the ACID properties?
When data integrity and reliability are top considerations in a transaction processing system, the system will
typically apply four properties to those transactions for ACID-compliance:

Atomicity. A transaction is treated as a single atomic unit. All steps that make up the transaction must succeed
or the entire transaction rolls back. If they all succeed, the changes made by the transaction are permanently
committed to the managing system. Consider the transfer transaction example. For the transaction to be committed
to the database, the $200 must be successfully deducted from the savings account and added to the checking account,
 and the funds in both accounts must be verified to ensure their accuracy. If any of these tasks fail, all changes
roll back and none are committed.

Consistency. A transaction must preserve the consistency of the underlying data. The transaction should make no
changes that violate the rules or constraints placed on the data. For instance, a database that supports banking
transactions might include a rule stating that a customer's account balance can never be a negative number.
If a transaction attempts to withdraw more money from an account than what is available, the transaction will fail,
and any changes made to the data will roll back.

Isolation. A transaction is isolated from all other transactions. Transactions can run concurrently only if they
don't interfere with each other. Returning to the transfer transaction example, if another transaction were to
attempt to withdraw funds from the same savings account, isolation would prevent the second transaction from firing.
Without isolation, it might be possible for the second transaction to withdraw more funds than are available in
the account after the first transaction was completed.

Durability. A transaction that is committed is guaranteed to remain committed -- that is, all changes are made 
permanent and will not be lost if an event such as a power failure should occur. This typically means persisting 
the changes to nonvolatile storage. If durability were not guaranteed, it would be possible for some or all changes
to be lost, affecting the data's reliability.


// Seeding example in MongoDB

// Import the MongoDB driver
const MongoClient = require('mongodb').MongoClient;

// Connection URL
const url = 'mongodb://localhost:27017';

// Database Name
const dbName = 'mydatabase';

// Sample data to be seeded
const users = [
    { name: 'John Doe', email: 'john@example.com', role: 'user' },
    { name: 'Jane Smith', email: 'jane@example.com', role: 'admin' },
    // Add more documents as needed
];

// Connect to MongoDB
MongoClient.connect(url, function(err, client) {
    if (err) throw err;

    // Get the database
    const db = client.db(dbName);

    // Get the collection
    const collection = db.collection('users');

    // Insert the documents
    collection.insertMany(users, function(err, result) {
        if (err) throw err;

        console.log('Seeding completed successfully.');

        // Close the connection
        client.close();
    });
});
